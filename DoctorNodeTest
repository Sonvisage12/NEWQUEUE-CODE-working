#include <esp_now.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <map>
#include <queue>
#include <SPI.h>
#include <MFRC522.h>
#include <Preferences.h>
#include "SharedQueue.h"


// Pins
#define GREEN_LED_PIN 15
#define RED_LED_PIN   2
#define RST_PIN       5
#define SS_PIN        4
uint8_t myMAC[6];
int doctorRole = 2;  // 1 = First doctor, 2 = Second doctor

MFRC522 mfrc522(SS_PIN, RST_PIN);
Preferences prefs;
int k=0;int N=1; int m=1;
int patientNum = 0;

// Queue item structure

// Sync request structure
struct SyncRequest {
  char type[10]; // "SYNC_REQ"
};

// Queue structures
std::map<String, QueueItem> queueMap;
std::queue<String> patientOrder;
SharedQueue sharedQueue("rfid-patients");
// MAC addresses
//uint8_t displayMAC[] = {0xA4, 0xCF, 0x12, 0xF1, 0x6B, 0xA5};
uint8_t displayMAC[] = {0x68, 0xC6, 0x3A, 0xFC, 0x61, 0x3E};
uint8_t peer3[] = {0x08, 0xD1, 0xF9, 0xD7, 0x50, 0x98};
uint8_t peer2[] = {0x30, 0xC6, 0xF7, 0x44, 0x1D, 0x24};
//uint8_t peer1[] = {0x78, 0x42, 0x1C, 0x6C, 0xA8, 0x3C};
uint8_t peer1[] = {0x78, 0x42, 0x1C, 0x6C, 0xE4, 0x9C};

std::vector<uint8_t*> peerMACs = { peer1, peer2, peer3, displayMAC };

// Forward declarations
void displayNextPatient();
String getUIDString(byte *buffer, byte bufferSize);
void blinkLED(int pin);

// ======= Queue Persistence =======
void persistQueue() {
  prefs.begin("queue", false);
  prefs.clear();
  int i = 0;
  for (auto& entry : queueMap) {
    String key = "q_" + String(i);
    prefs.putBytes(key.c_str(), &entry.second, sizeof(QueueItem));
    i++;
  }
  prefs.putUInt("queueSize", i);
  prefs.end();
}

void loadQueueFromFlash() {
  prefs.begin("queue", true);
  int size = prefs.getUInt("queueSize", 0);
  for (int i = 0; i < size; i++) {
    String key = "q_" + String(i);
    QueueItem item;
    if (prefs.getBytes(key.c_str(), &item, sizeof(QueueItem))) {
      String uid = String(item.uid);
      queueMap[uid] = item;
      patientOrder.push(uid);
    }
  }
  prefs.end();
  Serial.println("üîÅ Restored queue from flash.");
}

// ======= ESP-NOW Messaging =======
void broadcastQueueItem(const QueueItem& item) {
  for (auto mac : peerMACs) {
    esp_now_send(mac, (uint8_t*)&item, sizeof(item));
    delay(10);
  }
}

void broadcastFullQueue() {
  for (auto& entry : queueMap) {
    broadcastQueueItem(entry.second);
  }
  Serial.println("üì§ Broadcasted full queue.");
}

void onDataRecv(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
  sharedQueue.print();
  if (len == sizeof(SyncRequest)) {
    SyncRequest req;
    memcpy(&req, incomingData, sizeof(req));
    if (strcmp(req.type, "SYNC_REQ") == 0) {
      Serial.println("üîÑ Received sync request.");
      broadcastFullQueue();
      return;
    }
  }

  if (len == sizeof(QueueItem)) {
    QueueItem item;
    memcpy(&item, incomingData, sizeof(item));
    String uid = String(item.uid);

    if (item.removeFromQueue) {
      if (queueMap.count(uid)) {
        queueMap.erase(uid);

        std::queue<String> temp;
        while (!patientOrder.empty()) {
          if (patientOrder.front() != uid)
            temp.push(patientOrder.front());
          patientOrder.pop();
        }
        patientOrder = temp;

        Serial.print("üóëÔ∏è Removed: ");
        Serial.println(uid);
        persistQueue();
        displayNextPatient();
      }
    } else {
      if (!queueMap.count(uid)) {
        queueMap[uid] = item;
        patientOrder.push(uid);
        Serial.print("üì• Added Patient ");
        Serial.print(item.number);
        Serial.print(" | UID: ");
        Serial.println(uid);
        persistQueue();
       displayNextPatient();
       
      }
    }
  }
}

// ======= Setup & Loop =======
void setup() {
  Serial.begin(115200);
  SPI.begin();
   prefs.begin("rfidMap", false);  // false = write mode
  //prefs.clear();
  // Clear SharedQueue data
 // prefs.begin("rfid-patients", false);  // false = read-write
  //prefs.clear();
  //Serial.println("‚úÖ Cleared 'rfid-patients' queue data.");

  // Example: add multiple UID‚ÜíNumber entries
  prefs.putUInt("13B6B1E3", 1);
  prefs.putUInt("13D7ADE3", 2);
  prefs.putUInt("A339D9E3", 3);
  prefs.putUInt("220C1805", 4);
  prefs.putUInt("638348E3", 5);
  prefs.putUInt("A3E9C7E3", 6);
  prefs.putUInt("5373BEE3", 7);
  prefs.putUInt("62EDFF51", 8);
  prefs.putUInt("131DABE3", 9);
  prefs.putUInt("B3D4B0E3", 10);
  prefs.putUInt("23805EE3", 11);
  prefs.putUInt("1310BAE3", 12);
  prefs.putUInt("D38A47E3", 13);
  prefs.putUInt("6307D8E3", 14);
  prefs.putUInt("D35FC4E3", 15);
  prefs.putUInt("C394B9E3", 16);
  // ... up to UID_XXXXXXX = 2000

  prefs.end();
  mfrc522.PCD_Init();

  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);
  digitalWrite(GREEN_LED_PIN, HIGH);
  digitalWrite(RED_LED_PIN, HIGH);

  WiFi.mode(WIFI_STA);
  Serial.print("WiFi MAC Address: ");
  Serial.println(WiFi.macAddress());

  esp_wifi_set_promiscuous(true);
  esp_wifi_set_channel(1, WIFI_SECOND_CHAN_NONE);
  esp_wifi_set_promiscuous(false);

  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå ESP-NOW Init Failed");
    return;
  }

  esp_now_register_recv_cb(onDataRecv);

  for (auto mac : peerMACs) {
    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, mac, 6);
    peerInfo.channel = 1;
    peerInfo.encrypt = false;
    if (!esp_now_is_peer_exist(mac)) {
      esp_now_add_peer(&peerInfo);
    }
  }
SyncRequest sync = { "SYNC_REQ" };

for (auto mac : peerMACs) {
  esp_now_send(mac, (uint8_t*)&sync, sizeof(sync));
}
sharedQueue.load();
  loadQueueFromFlash();
  Serial.println("üë®‚Äç‚öïÔ∏è Staff Node Ready");
  sharedQueue.print();
  displayNextPatient();
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) return;

  String uid = getUIDString(mfrc522.uid.uidByte, mfrc522.uid.size);
  uid.toUpperCase();

  if (!patientOrder.empty() && uid == patientOrder.front())  {
    
    QueueItem item = queueMap[uid];
    item.removeFromQueue = true;
    broadcastQueueItem(item);

    queueMap.erase(uid);
    patientOrder.pop();
   
    persistQueue();
    Serial.print("‚úÖ Attended: ");
    Serial.println(item.number);
    blinkLED(GREEN_LED_PIN);
    displayNextPatient1();
    sharedQueue.print();
  } else {
    Serial.println("‚ùå Access Denied");
    blinkLED(RED_LED_PIN);
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
  delay(1000);
}

// ======= Helpers =======


String getUIDString(byte *buffer, byte bufferSize) {
  String uid = "";
  for (byte i = 0; i < bufferSize; i++) {
    if (buffer[i] < 0x10) uid += "0";
    uid += String(buffer[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}

void displayNextPatient() {
  std::queue<String> temp = patientOrder;

  int targetIndex = doctorRole - 1;  // 0 for first doctor, 1 for second doctor

  // Traverse to the correct patient based on role
  while (!temp.empty() && targetIndex-- > 0) {
    temp.pop();
  }

  if (temp.empty()) {
    patientNum = 0;
    esp_now_send(displayMAC, (uint8_t*)&patientNum, sizeof(patientNum));
    Serial.println("üì≠ Not enough patients for this doctor node.");
    N = 1;
    return;
  }

  String uid = temp.front();

  if (queueMap.count(uid)) {
    QueueItem item = queueMap[uid];
     item.removeFromQueue = true;
    broadcastQueueItem(item);
    patientNum = item.number;

    if (k == 1 || N == 1) {
      esp_now_send(displayMAC, (uint8_t*)&patientNum, sizeof(patientNum));
      k = 0;
      N = 0;
    }

    Serial.print("üîî Doctor ");
    Serial.print(doctorRole);
    Serial.print(" assigned Patient No: ");
    Serial.println(patientNum);
  } else {
    patientNum = 0;
    esp_now_send(displayMAC, (uint8_t*)&patientNum, sizeof(patientNum));
    Serial.println("‚ö†Ô∏è UID not found in queueMap.");
    N = 1;
  }
}



void displayNextPatient1() {
  while (!patientOrder.empty()) {
    String uid = patientOrder.front();
    if (queueMap.count(uid)) {
      QueueItem item = queueMap[uid];
      broadcastQueueItem(item);
      patientNum = item.number;
   
      esp_now_send(displayMAC, (uint8_t*)&patientNum, sizeof(patientNum));
    
      Serial.print("üîî Next Patient: ");
      Serial.println(patientNum);
      return;
    } else {
      patientOrder.pop();
    }
  }
  patientNum = 0;

  esp_now_send(displayMAC, (uint8_t*)&patientNum, sizeof(patientNum));
  Serial.println("üì≠ Queue is empty"); N=1;
}

int getPermanentNumber(String uid) {
  prefs.begin("rfidMap", true);  // Read-only mode
  int pid = -1;

  if (prefs.isKey(uid.c_str())) {
    pid = prefs.getUInt(uid.c_str(), -1);
    Serial.print("‚úÖ Known UID: ");
    Serial.print(uid);
    Serial.print(" -> Assigned Number: ");
    Serial.println(pid);
  } else {
    Serial.print("‚ùå Unknown UID: ");
    Serial.print(uid);
    Serial.println(" ‚Üí Access denied.");
  }

  prefs.end();
  return pid;
}
void blinkLED(int pin) {
  digitalWrite(pin, LOW);
  delay(1000);
  digitalWrite(pin, HIGH);
}
